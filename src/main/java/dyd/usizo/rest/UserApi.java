package dyd.usizo.rest;

import dyd.usizo.accessingdatamysql.RoleRepository;
import dyd.usizo.accessingdatamysql.UserRepository;
import dyd.usizo.models.Product;
import dyd.usizo.models.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController
public class UserApi {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private RoleRepository roleRepository;

    @GetMapping("/api/user")
    public Optional<User> getUser(@RequestParam(value = "action", defaultValue = "find") String action, @RequestParam(value = "id", defaultValue = "1") int id) {
        if (action.equals("find")) return  userRepository.findById(id);
        else {
            userRepository.delete(userRepository.findById(id).get());
            return null;
        }
    }

    @PostMapping("/api/user")
    public User addUser(@RequestParam(value = "id", required = false, defaultValue = "-1") int id,
                        @RequestParam(value = "name", required = true, defaultValue = "") String name,
                        @RequestParam(value = "url", required = true, defaultValue = "") String imgUrl,
                        @RequestParam(value = "role", required = true, defaultValue = "") int role,
                        @RequestParam(value = "pass", required = true, defaultValue = "") String pass) {
        if(id == -1){
            return  userRepository.save(new User(name,pass,roleRepository.findById(role).get()));
        } else if (userRepository.existsById(id)){
            User p = userRepository.findById(id).get();
            p.setPassword(pass);
            p.setNom(name);
            p.setImgUrl(imgUrl);
            return  userRepository.save(p);
        }
        return null;
    }

    @GetMapping("/api/users")
    public Iterable<User> getUsers() {
        if (!userRepository.findAll().iterator().hasNext()){
            List<User> lp = new ArrayList<>();
            lp.add(new User("Yanis", "", roleRepository.findById(2).get()));
            lp.add(new User("Damien", "" ,roleRepository.findById(2).get()));
            userRepository.saveAll(lp);
        }
        return userRepository.findAll();
    }
}
